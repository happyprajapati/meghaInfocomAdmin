import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { Dialog, DialogHeader, DialogBody } from '@material-tailwind/react';
import { Bounce, toast } from 'react-toastify';
import { HiMiniXMark } from 'react-icons/hi2';

export default function FDialog({ name, handleOpen, open }) {
  const [message, setMsg] = useState('');
  const [images, setImages] = useState([]);
  const [cat, setCat] = useState([]);

  const [empData, setEmpData] = useState({
    name: '',
    email: '',
    password: '',
  });
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitting },
  } = useForm();

  // const onFileSelect = (e) => {
  //   const files = e.target.files;
  //   if (files.length == 0) return;
  //   for (let i = 0; i < files.length; i++) {
  //     if (!images.some((e) => e.name == files[i].name)) {
  //       setImages((pre) => [
  //         ...pre,
  //         {
  //           name: files[i].name,
  //           url: URL.createObjectURL(files[i]),
  //         },
  //       ]);
  //     }
  //   }
  // };

  // const { register, handleSubmit } = useForm();
  const [selectedFiles, setSelectedFiles] = useState([]);

  const onFileSelect = (e) => {
    const files = Array.from(e.target.files);
    if (files.length == 0) return;
    for (let i = 0; i < files.length; i++) {
      if (!images.some((e) => e.name == files[i].name)) {
        setImages((pre) => [
          ...pre,
          {
            name: files[i].name,
            url: URL.createObjectURL(files[i]),
          },
        ]);
      }
    }
    setSelectedFiles(files);
  };

  const handleRemoveImg = (index) => {
    // console.log("fileToRemove: ",fileToRemove)
    setSelectedFiles((prevFiles) => prevFiles.filter((_, i) => i != index));
    setImages((pre) => pre.filter((_, i) => i != index));
    // console.log(selectedFiles)
    // console.log(images)
  };

  useEffect(() => {
    // console.log(images);
    console.log(selectedFiles);
    console.log(images);
  }, [images]);

  useEffect(() => {
    fetch('https://meghainfocom-production.up.railway.app/api/category/', {
      method: 'GET',
    })
      .then((res) => res.json())
      .then((res) => {
        setCat(res.data);
      });
  }, []);

  // const removeImage = (index) => {
  //   console.log(index);
  //   setImages((pre) => pre.filter((_, i) => i != index));
  //   console.log(register('images'));
  // };

  const handleEventChange = () => {
    setEmpData({
      ...empData,
      [e.target.name]: e.target.value,
    });
  };

  const handleAddEvent = (e) => {
    e.preventDefault();

    // fetch("https://universal-workflow-management-production.up.railway.app/api/manager/room/", {
    //   method: "POST",
    //   body: JSON.stringify(empData),
    //   headers: {
    //     Authorization: `Bearer ${localStorage.getItem("authToken")}`,
    //     "Content-Type": "application/json",
    //     "Access-Control-Allow-Origin": "*",
    //   },
    // })
    //   .then((res) => res.json())
    //   .then((res) => {
    //     if (res.success) {
    toast.success(res.message, {
      position: 'top-right',
      autoClose: 3000,
      hideProgressBar: false,
      closeOnClick: true,
      pauseOnHover: true,
      draggable: true,
      progress: undefined,
      theme: 'light',
      transition: Bounce,
    });
    handleOpen();
    // } else {
    //   toast.error(res.message, {
    //     position: "top-right",
    //     autoClose: 3000,
    //     hideProgressBar: false,
    //     closeOnClick: true,
    //     pauseOnHover: true,
    //     draggable: true,
    //     progress: undefined,
    //     theme: "light",
    //     transition: Bounce,
    // });
    // }
    // })
    // .catch((err) => {
    //   setMsg(err);
    // });
  };

  // const handleRemoveImg = (formData) =>{
  //   console.log("formData")
  //   console.log(formData)
  // }

  const handleProduct = (formData) => {
    formData.images = selectedFiles;
    console.log(formData);
    fetch('https://meghainfocom-production.up.railway.app/api/products/', {
      method: 'POST',
      body: JSON.stringify(formData),
      headers: {
        // 'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
        'Authorization': `Bearer eyJhbGciOiJIUzM4NCJ9.eyJpYXQiOjE3MjQxMzE0MjQsImV4cCI6MTcyNDIxNzgyNCwicGhvbmUiOiIxMjM0NTY3ODkwIiwiYXV0aG9yaXRpZXMiOiJST0xFX1VTRVIifQ.J7d7sR_LKgu7LA0yerqRDf58VmpPDxUfzE02hq-6XiV1rOQ7HSWqr4ynNXfuUKns`,
        // 'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
        // "type": "formData"
      },
    })
      .then((res) => res.json())
      .then((res) => {
        if (res.success) {
          toast.success(res.message, {
            position: 'top-right',
            autoClose: 3000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: 'light',
            transition: Bounce,
          });
          handleOpen();
        } else {
          console.log(res.message)
          toast.error(res.message, {
            position: 'top-right',
            autoClose: 3000,
            hideProgressBar: false,
            closeOnClick: true,
            pauseOnHover: true,
            draggable: true,
            progress: undefined,
            theme: 'light',
            transition: Bounce,
          });
        }
      })
      .catch((err) => {
        setMsg(err);
      });
  };

  return (
    <>
      {name == 'Employee' && (
        <>
          <Dialog open={open} handler={handleOpen} className="dark:bg-boxdark">
            <DialogHeader className="flex justify-center dark:text-gray">
              Add {name}
            </DialogHeader>
            <DialogBody>
              {message && (
                <div className="flex justify-center w-full my-2 p-2 border border-[#dc2626] bg-[#fecaca] rounded-md">
                  <span className="text-[#16a34a]">{message}</span>
                </div>
              )}
              <form className="w-full lg:px-5 md:px-5 dark:text-gray">
                <div className="flex flex-col gap-y-1 my-2">
                  <span>Name</span>
                  <input
                    type="text"
                    name="name"
                    className="rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    onChange={handleEventChange}
                  />
                </div>
                <div className="flex flex-col gap-y-1 my-2">
                  <span>Email</span>
                  <input
                    type="email"
                    name="email"
                    className="rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    onChange={handleEventChange}
                  />
                </div>
                <div className="flex flex-col gap-y-1 my-2">
                  <span>Password</span>
                  <input
                    type="password"
                    name="password"
                    className="rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    onChange={handleEventChange}
                  />
                </div>
                <div className="flex justify-center mt-5">
                  <button
                    type="submit"
                    className="bg-blue-500 px-8 text-white px-3 py-2 rounded-lg"
                    onClick={handleAddEvent}
                  >
                    Add
                  </button>
                </div>
              </form>
            </DialogBody>
          </Dialog>
        </>
      )}

      {name == 'Product' && (
        <>
          <Dialog
            open={open}
            handler={handleOpen}
            className="h-screen overflow-y-auto dark:bg-boxdark"
          >
            <DialogHeader className="flex justify-center pb-2 dark:text-gray">
              Add {name}
            </DialogHeader>
            <DialogBody>
              <form
                className="w-full lg:px-5 md:px-5 dark:text-gray"
                encType='multipart/form-data'
                onSubmit={handleSubmit(handleProduct)}
              >
                <div className="flex flex-col gap-y-1">
                  <span>Title</span>
                  <input
                    {...register('title')}
                    type="text"
                    name="title"
                    className="rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    // onChange={handleEventChange}
                  />
                </div>
                <div className="flex flex-col gap-y-1 my-2">
                  <span>model No.</span>
                  <input
                    {...register('modelNo')}
                    type="text"
                    name="modelNo"
                    className="rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    // onChange={handleEventChange}
                  />
                </div>
                <div className="flex flex-col gap-y-1 my-2">
                  <span>Category</span>
                  <select
                    {...register('category')}
                    name="category"
                    className="rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                  >
                    <option className="py-2">Select Category</option>
                    {cat.map((cat, key) => (
                      <option value={cat.id} className="py-2">
                        {cat.name}
                      </option>
                    ))}
                  </select>
                </div>
                <div className="flex flex-col gap-y-1 my-2">
                  <span>Description</span>
                  <textarea
                    {...register('description')}
                    rows={5}
                    cols={30}
                    className="rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    name="desc"
                    // onChange={handleEventChange}
                  />
                </div>
                <div className="flex flex-col gap-y-1 my-2">
                  <span>Add Image</span>
                  {/* <input
                  {...register("images")}
                    type="file"
                    name="images"
                    className="rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary"
                    multiple
                    onChange={onFileSelect}
                    title=" "
                  /> */}
                  <span className="relative cursor-pointer rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary">
                    Choose File
                    <input
                      id="images"
                      {...register('images')}
                      type="file"
                      name="images"
                      className="absolute opacity-0 left-0 top-0"
                      multiple
                      onChange={onFileSelect}
                    />
                  </span>
                  {/* <label htmlFor="images" className="rounded-lg border border-stroke bg-white p-3 text-black outline-none focus:border-primary focus-visible:shadow-none dark:border-form-strokedark dark:bg-meta-4 dark:text-white dark:focus:border-primary">
                    Choose File
                  </label>
                  <input
                    id="prod_img"
                    {...register('prod_img')}
                    type="file"
                    name="prod_img"
                    // className="hidden"
                    multiple
                    onChange={onFileSelect}
                  /> */}
                </div>
                <div className="grid grid-cols-3 gap-2">
                  {images &&
                    images.map((image, index) => (
                      <div key={index} className="">
                        <div className="flex flex-row justify-between px-2">
                          <p>{image.name}</p>
                          <HiMiniXMark
                            className="w-6 h-6 cursor-pointer"
                            onClick={() => {
                              handleRemoveImg(index);
                            }}
                          />
                        </div>
                        <img
                          src={image.url}
                          alt="preview"
                          className="h-30 mx-auto object-contain mb-2"
                        />
                      </div>
                    ))}
                </div>
                <div className="flex justify-center my-5">
                  <button
                    type="submit"
                    disabled={isSubmitting}
                    className="bg-blue-500 px-8 text-white px-3 py-2 rounded-lg disabled:bg-[#38bdf8] disabled:cursor-not-allowed"
                  >
                    {isSubmitting ? 'Adding...' : 'Add'}
                  </button>
                </div>
              </form>
            </DialogBody>
          </Dialog>
        </>
      )}
    </>
  );
}
